# This file contains the fastlane.tools configuration 
# You can find the documentation at https://docs.fastlane.tools 

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Create release and publish to App Store"
  lane :appstore_release do |options|
    unless is_azure_devops?
      UI.user_error! "Lane can only be run on Azure DevOps"
      next
    end

    manual_codesign(options)
    build
    screenshots
    deliver(
      force: true,
      metadata_path: "./Metadata"
    )
  end

  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(
      scheme: get_screenshot_schema,
      skip_open_summary: true
    )
  end

  # Being able to inject all the neccessary certificates and provisioning profiles during
  # build is key to our build process. With this way, each team can have it's own Apple
  # developer account which get's replaced during build on Azure DevOps with our information.
  private_lane :manual_codesign do |options|
    cert(
      team_id: get_team_id(options)
    )
    sigh(
      app_identifier: get_app_identifier(options),
      team_id: get_team_id(options),
      force: true
    )
    automatic_code_signing(
      use_automatic_signing: false,
      team_id: get_team_id(options),
      targets: get_schema(options),
      code_sign_identity: get_code_signing_identity(options),
      bundle_identifier: get_app_identifier(options)
    )
  end

  private_lane :build do |options|
    build_app(
      scheme: get_schema(options)
    ) 
  end

  private_lane :is_azure_devops? do
    !ENV["System_TeamProject"].nil?
  end

  private_lane :get_team_id do |options|
    team_id = options[:team_id]
    UI.user_error! "You have to pass a team id using the `team_id` parameter." if team_id.nil?
    team_id
  end

  private_lane :get_app_identifier do |options|
    app_identifier = options[:app_identifier]
    UI.user_error! "You have to pass an app identifier using the `app_identifier` parameter." if app_identifier.nil?
    app_identifier
  end

  private_lane :get_schema do |options|
    schema = options[:schema]
    if schema.nil? then
      schema = "App-iOS"
      UI.important "Using #{schema} as the schema. You can pass a different schema using the `schema` parameter."
    end
    schema
  end

  private_lane :get_screenshot_schema do |options|
    schema = options[:screenshot_schema]
    if schema.nil? then
      schema = "Screenshots"
      UI.important "Using #{schema} as the screenshot schema. You can pass a different schema using the `screenshot_schema` parameter."
    end
    schema
  end

  private_lane :get_code_signing_identity do |options|
    code_sign_identity = options[:code_sign_identity]
    if code_sign_identity.nil? then
      code_sign_identity = "iPhone Distribution"
      UI.important "Using #{code_sign_identity} as the code signing identity. You can pass a different identity using the `code_sign_identity` parameter."
    end
    code_sign_identity
  end
end
